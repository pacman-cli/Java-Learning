{"ast":null,"code":"const API_URL = \"http://localhost:8080/api/auth\";\nexport async function signup(user) {\n  const res = await fetch(`${API_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  });\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(error || \"Sign up failed\");\n  }\n  const data = await res.json();\n  return data; // UserResponseDto\n}\nexport async function login(user) {\n  const res = await fetch(`${API_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  });\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(error || \"Login failed\");\n  }\n  const token = await res.text(); // JWT returned as plain text\n  localStorage.setItem(\"token\", token); // ✅ save token\n  return token;\n}","map":{"version":3,"names":["API_URL","signup","user","res","fetch","method","headers","body","JSON","stringify","ok","error","text","Error","data","json","login","token","localStorage","setItem"],"sources":["/Users/puspo/JavaCourse/SpringBoot/pokemon-apfrontend/my-app/src/api/authApi.js"],"sourcesContent":["const API_URL = \"http://localhost:8080/api/auth\";\n\nexport async function signup(user) {\n  const res = await fetch(`${API_URL}/signup`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  });\n\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(error || \"Sign up failed\");\n  }\n\n  const data = await res.json();\n  return data; // UserResponseDto\n}\n\nexport async function login(user) {\n  const res = await fetch(`${API_URL}/login`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  });\n\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(error || \"Login failed\");\n  }\n\n  const token = await res.text(); // JWT returned as plain text\n  localStorage.setItem(\"token\", token); // ✅ save token\n  return token;\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC;AAEhD,OAAO,eAAeC,MAAMA,CAACC,IAAI,EAAE;EACjC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,SAAS,EAAE;IAC3CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACC,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,KAAK,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAC9B,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,gBAAgB,CAAC;EAC5C;EAEA,MAAMG,IAAI,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI,CAAC,CAAC;AACf;AAEA,OAAO,eAAeE,KAAKA,CAACd,IAAI,EAAE;EAChC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;IAC1CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACC,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,KAAK,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAC9B,MAAM,IAAIC,KAAK,CAACF,KAAK,IAAI,cAAc,CAAC;EAC1C;EAEA,MAAMM,KAAK,GAAG,MAAMd,GAAG,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAChCM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC,CAAC;EACtC,OAAOA,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}