{"ast":null,"code":"const BASE = \"http://localhost:8080/api/pokemons\";\n\n// helper to get headers with JWT\nfunction getAuthHeaders() {\n  const token = localStorage.getItem(\"token\");\n  return {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`\n  };\n}\nexport async function createPokemon(payload) {\n  const res = await fetch(BASE, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) throw new Error(\"Failed to create Pokémon\");\n  return res.json();\n}\nexport async function fetchAll() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) throw new Error(\"No token found. Login first.\");\n  const res = await fetch(BASE, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch Pokémon: \" + res.status);\n  return res.json();\n}","map":{"version":3,"names":["BASE","getAuthHeaders","token","localStorage","getItem","Authorization","createPokemon","payload","res","fetch","method","headers","body","JSON","stringify","ok","Error","json","fetchAll","status"],"sources":["/Users/puspo/JavaCourse/SpringBoot/pokemon/pokemon-apfrontend/my-app/src/api/pokemonApi.js"],"sourcesContent":["const BASE = \"http://localhost:8080/api/pokemons\";\n\n// helper to get headers with JWT\nfunction getAuthHeaders() {\n  const token = localStorage.getItem(\"token\");\n  return {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n  };\n}\n\nexport async function createPokemon(payload) {\n  const res = await fetch(BASE, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) throw new Error(\"Failed to create Pokémon\");\n  return res.json();\n}\n\nexport async function fetchAll() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) throw new Error(\"No token found. Login first.\");\n\n  const res = await fetch(BASE, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch Pokémon: \" + res.status);\n  return res.json();\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,oCAAoC;;AAEjD;AACA,SAASC,cAAcA,CAAA,EAAG;EACxB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO;IACL,cAAc,EAAE,kBAAkB;IAClCC,aAAa,EAAE,UAAUH,KAAK;EAChC,CAAC;AACH;AAEA,OAAO,eAAeI,aAAaA,CAACC,OAAO,EAAE;EAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,IAAI,EAAE;IAC5BU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAEV,cAAc,CAAC,CAAC;IACzBW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOR,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC/B,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,MAAM,IAAIc,KAAK,CAAC,8BAA8B,CAAC;EAE3D,MAAMR,GAAG,GAAG,MAAMC,KAAK,CAACT,IAAI,EAAE;IAC5BU,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCN,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,IAAI,CAACM,GAAG,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,GAAGR,GAAG,CAACW,MAAM,CAAC;EACtE,OAAOX,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}